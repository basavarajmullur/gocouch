
type BulkSaveRequest struct {
	Docs []interface{} `json:"ids"`
}

func (c *Client) BulkSave(ids ...interface{}) (resp *[]Response, code int, err error) {
	bulkSaveRequest := &BulkSaveRequest{Docs: ids}
	reader, err := docReader(bulkSaveRequest)

	req, err := c.NewRequest("POST", c.UrlString(c.DBPath()+"/_bulk_docs", nil), reader, nil)
	if err != nil {
		return
	}
	httpResp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	code, err = c.HandleResponse(httpResp, &resp)
	if err != nil {
		return
	}
	return
}

type MultiDocResponse struct {
	TotalRows uint64 `json:"total_rows"`
	Offset    uint64
	Rows      []Row
}

type Row struct {
	ID    *string
	Key   interface{}
	Value interface{}
	Doc   interface{}
}

type KeysRequest struct {
	Keys []string `json:"keys"`
}

func (c *Client) View(design string, name string, options *url.Values, keys *[]string) (multiDocResponse *MultiDocResponse, err error) {
	url := c.UrlString(c.DBPath()+"/_design/"+design+"/_view/"+name, options)

	method := ""
	body := new(bytes.Buffer)
	if keys != nil {
		reqJson, _ := json.Marshal(KeysRequest{Keys: *keys})
		body = bytes.NewBuffer(reqJson)
		method = "POST"
	} else {
		method = "GET"
	}

	req, err := c.NewRequest(method, url, body, nil)
	if err != nil {
		return
	}

	httpResp, err := http.DefaultClient.Do(req)
	defer httpResp.Body.Close()
	if err != nil {
		return
	}

	respBody, err := ioutil.ReadAll(httpResp.Body)
	if err != nil {
		return
	}

	if err = json.Unmarshal(respBody, &multiDocResponse); err != nil {
		return
	}
	return
}

func (c *Client) Copy(src string, dest string, destRev *string) (resp *Response, code int, err error) {
	if destRev != nil {
		dest += "?rev=" + *destRev
	}

	req, err := c.NewRequest("COPY", c.UrlString(c.DocPath(src), nil), nil, nil)
	req.Header.Add("Destination", dest)
	if err != nil {
		return
	}
	httpResp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	code, err = c.HandleResponse(httpResp, &resp)
	if err != nil {
		return
	}
	return
}

type ReplicateRequest struct {
	Source       string            `json:"source"`
	Target       string            `json:"target"`
	Cancel       bool              `json:"cancel,omitempty"`
	Continuous   bool              `json:"continuous,omitempty"`
	CreateTarget bool              `json:"create_target,omitempty"`
	DocIDs       []string          `json:"doc_ids,omitempty"`
	Filter       string            `json:"filter,omitempty"`
	Proxy        string            `json:"proxy,omitempty"`
	QueryParams  map[string]string `json:"query_params,omitempty"`
}

type ReplicateResponse struct {
	Ok      bool `json:"ok"`
	LocalID bool `json:"_local_id"`
}

func (c *Client) Replicate(repReq *ReplicateRequest) (resp *ReplicateResponse, code int, err error) {
	reqReader, err := docReader(repReq)
	if err != nil {
		return
	}

	req, err := c.NewRequest("POST", c.UrlString("/_replicate", nil), reqReader, nil)
	if err != nil {
		return
	}
	httpResp, err := http.DefaultClient.Do(req)
	if err != nil {
		return
	}
	code, err = c.HandleResponse(httpResp, &resp)
	if err != nil {
		return
	}
	return
}

func (c *Client) DBPath() string {
	return c.URL.Path
}

func (c *Client) DocPath(id string) string {
	return c.DBPath() + "/" + id
}

func (c *Client) execJSON(method string, path string, result interface{}, doc interface{}, values *url.Values, headers *http.Header) (int, error) {
	resBytes, code, err := c.execRead(method, path, doc, values, headers)
	if err != nil {
		return 0, err
	}
	if err = c.HandleResponseError(code, resBytes); err != nil {
		return code, err
	}
	if err = json.Unmarshal(resBytes, result); err != nil {
		return 0, err
	}
	return code, nil
}

func (c *Client) execRead(method string, path string, doc interface{}, values *url.Values, headers *http.Header) ([]byte, int, error) {
	r, code, err := c.exec(method, path, doc, values, headers)
	if err != nil {
		return nil, 0, err
	}
	defer r.Close()
	resBytes, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, 0, err
	}
	return resBytes, code, nil
}

type IdRev struct {
	ID  string `json:"_id"`
	Rev string `json:"_rev"`
}

func Remarshal(doc interface{}, newDoc interface{}) (err error) {
	docJson, err := json.Marshal(doc)
	if err != nil {
		return
	}

	err = json.Unmarshal(docJson, newDoc)
	if err != nil {
		return
	}
	return
}

func ParseIdRev(doc interface{}) (string, string, error) {
	docJson, err := json.Marshal(doc)
	if err != nil {
		return "", "", err
	}

	idRev := &IdRev{}
	if err = json.Unmarshal(docJson, idRev); err != nil {
		return "", "", err
	}

	return idRev.ID, idRev.Rev, nil
}
